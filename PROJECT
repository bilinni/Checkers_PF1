;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname PROJECT) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; INIT
(require 2htdp/image)
(require 2htdp/universe)

;;SQUARE-SIZE
(define SIZE 50)

;;;WHITE TOKEN
(define W-TOKEN 
   (circle (/ SIZE 2) "solid" "green"))

;;;BLACK TOKEN
(define B-TOKEN
   (circle (/ SIZE 2) "solid" "red"))

;;;BOARD-IMAGE


;;BORDER-SQUARE
(define BORDER (square (+(* SIZE 8)(* (* SIZE 8) (/ 1 26.67 )))"solid" "brown"))

;;BOARD 
(define BOARD(above
              (beside (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black"))
              
              (beside (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white"))

              (beside (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black"))
              
              (beside (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white"))

              (beside (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black"))
              
              (beside (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white"))

              (beside (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black"))
              
              (beside (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white")
                      (square SIZE "solid" "black")
                      (square SIZE "solid" "white"))))


;;COMPLETE-BOARD
(define C-BOARD (overlay BOARD BORDER))    

;; Data Type - Token1 and Token2
; A Token1 and a Token2 are Posns

;; Data Type - Maybe<Token1>
; A Maybe<Token1> is one of:
; - a Token1 ; Player 1's token is present
; - #false  ; Player 1's token is missing 
; interpretation: a token from player 1 that may be missing

;; Data Type - Maybe<Token2>
; A Maybe<Token2> is one of:
; - a Token2 ; Player 2's token is present
; - #false  ; Player 2's token is missing 
; interpretation: a token from player 2 that may be missing

;: Data Type - Table
; A Table is a structure (make-Table Image Maybe<Token1> Maybe<Token2>)
;    where          Image          : Image
;                   Present-Token1 : Maybe<Token1>
;                   Present-Token2 : Maybe<Token2>
;
; interpretation: one of the following state:
;                 - a full board of tokens, or a board with at list one token
;                 - a Token1 that may be missing
;                 - a Token2 that may be missing


;State
(define-struct Table [Image Tokens Control])

;; Data Type - Token
; A Token is a structure (make-Token color super move1 move2 move3 move4 dead coordinates):
;   - color: is eather the String "White" or "Black"
;   - super: Boolean 
;   - move1: Boolean
;   - move2: Boolean
;   - move3: Boolean
;   - move4: Boolean
;   - dead: Boolean
;   - coordinates: Posn<Number> where Number is a posotive integer number between 0 and 7 (both included)

(define-struct Token [color super move1 move2 move3 move4 dead coordinates])

(define TOKENS-LIST (list
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 0 1))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 0 3))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 0 5))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 0 7))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 1 0))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 1 2))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 1 4))
                        (make-Token W-TOKEN #false #false #false #false #false #false (make-posn 1 6))
                        (make-Token W-TOKEN #false #false #false #true  #true  #false (make-posn 2 1))
                        (make-Token W-TOKEN #false #false #false #true  #true  #false (make-posn 2 3))
                        (make-Token W-TOKEN #false #false #false #true  #true  #false (make-posn 2 5))
                        (make-Token W-TOKEN #false #false #false #true  #false #false (make-posn 2 7))

                        (make-Token B-TOKEN #false #false #true  #false #false #false (make-posn 5 0))
                        (make-Token B-TOKEN #false #true  #true  #false #false #false (make-posn 5 2))
                        (make-Token B-TOKEN #false #true  #true  #false #false #false (make-posn 5 4))
                        (make-Token B-TOKEN #false #true  #true  #false #false #false (make-posn 5 6))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 6 1))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 6 3))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 6 5))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 6 7))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 7 0))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 7 2))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 7 4))
                        (make-Token B-TOKEN #false #false #false #false #false #false (make-posn 7 6))
                        ))


(define-struct Control [Start End])


(define INITIAL-STATE (make-Table
                       BOARD
                       TOKENS-LIST
                       (make-Control #false #false)
                       ))

;///////////////////


;DRAWING
(define (draw state)
  (draw-tokens (Table-Image state) (Table-Tokens state)))


(define (draw-tokens Image token-list)
  (cond
    [(null? token-list) Image]
    [else (draw-tokens (overlay/xy (Token-color (first token-list)) (* -1 (* SIZE (posn-y (Token-coordinates (first token-list)))))
                      (* -1 (* SIZE (posn-x (Token-coordinates (first token-list))))) Image) (rest token-list))])
  )

;///////////


;Mouse movement
(define (handle-mouse state x y event)
  (cond
    [(string=? "button-down" event)
     (make-Table 
      (Table-Image state)
      (Table-Tokens state)
      (make-Control (get-id-by-position (make-posn x y)) #false))]
    [(and (string=? "drag" event) (not (false? (Control-Start (Table-Control state)))))
     (make-Table 
      (Table-Image state)
      (Table-Tokens state)
      (make-Control (Control-Start (Table-Control state)) (get-id-by-position (make-posn x y))))]
   
    [(and (string=? "button-up" event) (not (false? (Control-Start (Table-Control state)))))
     (make-Table
      (Table-Image state)
      (change-position state) 
      (Table-Control state))]
    [else state]))



(define (get-id-by-position pos) 
  (make-posn (floor (- (abs (/ (posn-x pos) SIZE)) 0.5)) (floor (- (abs (/ (posn-y pos) SIZE)) 0.5)))) ; Uncalibrated version, to test the rest of the functionality


(define (change-position state)
  (add-element (make-Table
                (Table-Image state)
                (remove-element state)
                (Table-Control state))))

(define (remove-element state)
  (remove #false (map (lambda (item)
         (if (and (= (posn-x (Token-coordinates item)) (posn-x (Control-Start (Table-Control state))))
                  (= (posn-y (Token-coordinates item)) (posn-y (Control-Start (Table-Control state))))) #false item))
         (Table-Tokens state))))

(define (add-element state)
  (append (Table-Tokens state) (list (make-Token W-TOKEN #false #false #false #false #false #false
                                           (make-posn (posn-x (Control-End (Table-Control state)))
                                                      (posn-y (Control-End (Table-Control state))))))))


;/////////////////



; Main app
(big-bang INITIAL-STATE
  [to-draw draw]
  [on-mouse handle-mouse]
;  [on-key handle-key]
;  [stop-when quit?]
  )